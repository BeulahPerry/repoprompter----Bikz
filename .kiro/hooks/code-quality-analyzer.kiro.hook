{
  "enabled": true,
  "name": "Code Quality Analyzer",
  "description": "Monitors source code files for changes and analyzes modified code for potential improvements including code smells, design patterns, and best practices. Generates actionable suggestions for improving code quality while maintaining existing functionality.",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/**/*.ts",
      "src/**/*.tsx",
      "src/**/*.js",
      "src/**/*.jsx",
      "*.ts",
      "*.tsx",
      "*.js",
      "*.jsx"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Analyze the modified code files for potential improvements. Focus on:\n\n1. **Code Smells**: Identify long methods, large classes, duplicate code, complex conditionals, and other maintainability issues\n2. **Design Patterns**: Suggest appropriate design patterns that could improve code structure and reusability\n3. **Best Practices**: Check for proper error handling, naming conventions, type safety, and framework-specific best practices\n4. **Performance**: Identify potential performance bottlenecks and suggest optimizations\n5. **Readability**: Recommend improvements for code clarity, documentation, and maintainability\n\nFor each suggestion:\n- Explain the current issue clearly\n- Provide specific, actionable recommendations\n- Show code examples where helpful\n- Prioritize suggestions by impact (high/medium/low)\n- Ensure suggestions maintain existing functionality\n\nFocus on practical improvements that enhance code quality without requiring major architectural changes."
  }
}